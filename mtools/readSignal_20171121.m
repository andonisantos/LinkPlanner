function [ dataDecimate, data, symbolPeriod, samplingPeriod, samplingPeriodDecimate, type, numberOfSymbols, r ] = readSignal_20171121( fname, nReadr )

%READSIGNALDATA Reads signal data to "visualizer".
%   [ data, samplingFrequency ] = READSIGNALDATA(fid, type, symbolPeriod, samplingPeriod)
%   just reads data ("data") from a file ("fid")
%   knowing the data parameters ("type", "symbolPeriod" and "samplingPeriod") and 
%   returning the new sampling simulation frequency ("samplingFrequency").

%   nReadr specifies the number of symbols to read
%% Global variables related to AWG limitations of sampling rate and waveform memory
maximumSamplingFrequency = 16e9;         % set the maximum sampling rate of the AWG
maximumWaveformMemory    = 8e9;          % set the maximum waveform memory of the AWG

%% Open the "*.sgn" file generated by the simulator and read the content of the file
fid = fopen(fname,'r');                                     % read a particular "*.sgn" signal

type = fscanf(fid,'Signal type: %s\n',1);                   % Extraxt the type of the signal (i.e. type = TimeContinuousAmplitudeContinuousReal)
symbolPeriod = fscanf(fid,'Symbol Period (s): %f\n',1);     % Extract the symbol period of the signal (i.e. symbolPeriod = 2e-10)
samplingPeriod = fscanf(fid,'Sampling Period (s): %f\n',1); % Extract the sampling period of the signal (i.e. samplingPeriod = 1.25e-11). 
%                                                             REMEMBER OUR LIMITATION IS maximumSamplingRate = 6.2500e-11
fscanf(fid,'// ### HEADER TERMINATOR ###\n',1);             % It will just check our header terminator

symbolFrequency   = 1/symbolPeriod;
samplingFrequency = 1/samplingPeriod;
samplingFrequencyDecimate = 1/samplingPeriod;
%% Some Standard types
clc
tb = 'Binary';
tc1 = 'TimeDiscreteAmplitudeDiscreteComplex';
tc2 = 'TimeDiscreteAmplitudeContinuousComplex';
tc3 = 'TimeContinuousAmplitudeDiscreteComplex';
tc4 = 'TimeContinuousAmplitudeContinuousComplex';
tc5 = 'BandpassSignal';
toxy = 'OpticalSignalXY';
% Get global variable "nRead" & set data types
if nargin == 1
    nReadr = Inf;
end
t_binaryr = 'int';
t_realr = 'double';
t_complexr = 'double';
%% Number of samples per period
if (symbolPeriod==1)
    samplesPerSymbol = 1;
else
    samplesPerSymbol = (symbolPeriod/samplingPeriod);
end

%% Read data

% Binary signals
if strcmp(type, tb)
    data = fread(fid, nReadr, t_binaryr);
    data = data';
    numberOfSymbols = (length(data)/samplesPerSymbol);
end

% Complex signals
if strcmp(type, tc1) || strcmp(type, tc2) || strcmp(type, tc3) || strcmp(type, tc4) || strcmp(type, tc5)
   data = fread(fid, 2*samplesPerSymbol*nReadr, t_complexr);
   data = data(1:2:end) + 1i.*data(2:2:end);
   data = real(data)' + imag(data)'.*1i;
   numberOfSymbols = (length(data)/samplesPerSymbol);
end

% Complex_xy signals
if strcmp(type, toxy)
   data = fread(fid, 4*double(samplesPerSymbol)*nReadr, t_complexr);
   numberOfSymbols = (length(data)/samplesPerSymbol);
end

% Other signals
data = fread(fid, double(samplesPerSymbol)*nReadr, t_realr);
data = data';

% Number of symbols
numberOfSymbols = (length(data)/samplesPerSymbol);


%% RECOMMENDATION FOR TOO HIGH BIT RATE

%% ROMIL
% TOO HIGH BITRATE
if (symbolFrequency > maximumSamplingFrequency)
   fprintf('\nYOUR BIT RATE IS TOO HIGH !!!\n');
   fprintf('Recommendation : Either you can reduce the BIT RATE or increase the MODULATION ORDER.\n');
   return;
end
% Display CAUTION if Set samplingFrequency > 16e9
if (samplingFrequency > maximumSamplingFrequency)
    fprintf('CAUTION !!! sampling frequency must be less than %gGHz \nCurrent sampling frequency is %gGHz \n', maximumSamplingFrequency/1e9, samplingFrequency/1e9);
end
% Reduce the sampling period by a given factor 'r'.
excessiveSamples = 0;                             % Excesssive samples 
samplingFrequencyReference =  1/samplingPeriod;   % reference point for caclulating maximum reference
if (samplingFrequency < maximumSamplingFrequency)
    samplingFrequencyReference = samplingFrequencyReference;
else
    while samplingFrequencyReference > maximumSamplingFrequency
    samplingFrequencyReference = samplingFrequencyReference - symbolFrequency;
    excessiveSamples = excessiveSamples +1;
    end
end
maximumSamples = samplesPerSymbol-excessiveSamples;
r = ceil(samplesPerSymbol/maximumSamples);          % This 'r' is the decimation factor


%% DISPLAY :  NEW SAMPLING FREQUENCY AND RECOMMENDED DECOMATION FACTOR
samplingPeriodDecimate = samplingPeriod*r;
samplingFrequencyDecimate = 1/samplingPeriodDecimate;

% Or in other words we can write as,
% samplingFrequencyDecimate = samplingFrequency/r;

fprintf('\n\nNew "samplingFrequencyDecimate = %gGHz" and the recommend decomation factor "r = %d"\n',samplingFrequencyDecimate/1e9, r);

%% Number of samples per period
if (symbolPeriod==1)
    samplesPerSymbolDecimate = 1;
else
    samplesPerSymbolDecimate = (symbolPeriod/samplingPeriodDecimate);
end

%% DECIMATE DATA
if (r==0)
    dataDecimate = data;
else
    dataDecimate = decimate(data,r);    
end
%% PRINT ERROR MESSAGE WHEN SIGNAL LENGTH IS GREATER THAN 'maximumWaveformMemory'.
if    (length(dataDecimate) >  maximumWaveformMemory)                 
      msgbox('Problem with the signal file. Please check the matlab command window for more information.','Error','error');
      error('\nError: The chosen signal has to many samples(%d GS).\nMake sure it is less or equal to 8 G samples.\n\n',length(dataDecimate)/1e9);
      clear all;
      return;
end

% CONSIDER MAXIMUM LENGTH OF DATA VECTOR EQUALS TO "maximumWaveformMemory".
if  (length(dataDecimate) >  maximumWaveformMemory)                   
    dataDecimate = dataDecimate(1:maximumWaveformMemory);
else
    dataDecimate = dataDecimate;
end
%%
figure;
t = (0:1:length(data)-1)*samplingPeriod;
tDecimate = (0:r:length(data)-1)*samplingPeriod;
plot(t(1:end),data(1:end),'-o');
grid on
hold on
stem(tDecimate(1:end),dataDecimate(1:end),'ro','filled','markersize',4);
xlabel 'Time in Seconds',ylabel 'Signals'
legend('Original','Decimated')

figure;
plot(t(1:end),data(1:end));
hold on;
plot(tDecimate(1:end),dataDecimate(1:end),'LineWidth',3);
xlabel 'Time in Seconds',ylabel 'Signal'
legend('Simulated Waveform','Downsampled AWG Waveform')
title('Simulated vs AWG waveform');
